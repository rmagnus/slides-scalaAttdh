// Generated by CoffeeScript 1.3.3

/*
Caffeine High
    
This is a presentation tool based on impress.js by Bartek Szopka (@bartaz).

It started as a direct port but has moved on enough to start moving out of home and begin
a life of its own.

MIT Licensed.

Copyright 2012 Moritz Grauel (@mo_gr)
*/


/*
helper functions
*/


(function() {
  var $$, active, byId, caffeine, canvas, css, current, data, getElementFromUrl, hasRelativeRotation, hasRelativeTranslation, hashTimeout, idx, pfx, prefixMemory, prefixes, prev, props, rotate, scale, select, selectNext, selectPrev, step, stepData, steps, styleDummy, supportedBrowser, toArray, translate, ua, _i, _len;

  styleDummy = document.createElement('dummy').style;

  prefixes = ["Webkit", "Moz", "O", "ms", "Khtml"];

  prefixMemory = {};

  pfx = function(prop) {
    var property, props, uppercaseProp, _i, _len;
    if (!(prefixMemory[prop] != null)) {
      uppercaseProp = prop[0].toUpperCase() + prop.substr(1);
      props = (prop + " " + prefixes.join(uppercaseProp + " ") + uppercaseProp).split(" ");
      prefixMemory[prop] = null;
      for (_i = 0, _len = props.length; _i < _len; _i++) {
        property = props[_i];
        if (styleDummy[property] != null) {
          prefixMemory[prop] = property;
          break;
        }
      }
    }
    return prefixMemory[prop];
  };

  byId = function(id) {
    return document.getElementById(id);
  };

  getElementFromUrl = function() {
    return byId(window.location.hash.replace(/^#\!\/?/, ""));
  };

  toArray = function(a) {
    return Array.prototype.slice.call(a);
  };

  $$ = function(selector, context) {
    if (context == null) {
      context = document;
    }
    return toArray(context.querySelectorAll(selector));
  };

  css = function(el, props) {
    var styleKey, value;
    for (styleKey in props) {
      value = props[styleKey];
      el.style[pfx(styleKey)] = value;
    }
    return el;
  };

  /*
  CSS Helper
  */


  translate = function(t) {
    return " translate3d(" + t.x + "px," + t.y + "px," + t.z + "px) ";
  };

  rotate = function(r, revert) {
    var rX, rY, rZ;
    rX = " rotateX(" + r.x + "deg) ";
    rY = " rotateY(" + r.y + "deg) ";
    rZ = " rotateZ(" + r.z + "deg) ";
    if (revert) {
      return rZ + rY + rX;
    } else {
      return rX + rY + rZ;
    }
  };

  scale = function(s) {
    return " scale(" + s + ") ";
  };

  /*
  check support
  */


  ua = navigator.userAgent.toLowerCase();

  supportedBrowser = (pfx("perspective") != null) && ua.search(/(iphone)|(ipod)|(ipad)|(android)/) === -1;

  /*
  DOM Elements
  */


  caffeine = byId("caffeine");

  caffeine.className = supportedBrowser ? "" : "caffeine-not-supported";

  canvas = document.createElement("div");

  canvas.className = "canvas";

  toArray(caffeine.childNodes).forEach(function(slide) {
    return canvas.appendChild(slide);
  });

  caffeine.appendChild(canvas);

  steps = $$("article", caffeine);

  /*
  Setup the document
  */


  document.documentElement.style.height = "100%";

  css(document.body, {
    height: "100%",
    overflow: "hidden"
  });

  props = {
    position: "absolute",
    transformOrigin: "top left",
    transition: "all 0s ease-in-out",
    transformStyle: "preserve-3d"
  };

  css(caffeine, props);

  css(caffeine, {
    top: "50%",
    left: "50%",
    perspective: "1000px"
  });

  css(canvas, props);

  current = {
    translate: {
      x: 0,
      y: 0,
      z: 0
    },
    rotate: {
      x: 0,
      y: 0,
      z: 0
    },
    scale: 1
  };

  /*
  position the slides on the canvas
  */


  prev = null;

  for (idx = _i = 0, _len = steps.length; _i < _len; idx = ++_i) {
    step = steps[idx];
    data = step.dataset;
    stepData = {
      translate: {
        x: data.x || 0,
        y: data.y || 0,
        z: data.z || 0,
        dx: data.dx || 0,
        dy: data.dy || 0,
        dz: data.dz || 0
      },
      rotate: {
        x: data.rx || 0,
        y: data.ry || 0,
        z: data.rz || 0,
        dx: data.drx || 0,
        dy: data.dry || 0,
        dz: data.drz || 0
      },
      scale: data.scale || 1,
      dScale: data.dscale || 0,
      duration: data.duration || 1,
      dDuration: data.dduration || 0
    };
    if (prev != null) {
      hasRelativeTranslation = stepData.translate.dx || stepData.translate.dy || stepData.translate.dz;
      if (hasRelativeTranslation) {
        stepData.translate.x = +stepData.translate.x + 1 * stepData.translate.dx + 1 * prev.stepData.translate.x;
        stepData.translate.y = +stepData.translate.y + 1 * stepData.translate.dy + 1 * prev.stepData.translate.y;
        stepData.translate.z = +stepData.translate.z + 1 * stepData.translate.dz + 1 * prev.stepData.translate.z;
      }
      hasRelativeRotation = stepData.rotate.dx || stepData.rotate.dy || stepData.rotate.dz;
      if (hasRelativeRotation) {
        stepData.rotate.x = +stepData.rotate.x + 1 * stepData.rotate.dx + 1 * prev.stepData.rotate.x;
        stepData.rotate.y = +stepData.rotate.y + 1 * stepData.rotate.dy + 1 * prev.stepData.rotate.y;
        stepData.rotate.z = +stepData.rotate.z + 1 * stepData.rotate.dz + 1 * prev.stepData.rotate.z;
      }
      if (stepData.dScale) {
        stepData.scale = 1 * stepData.dScale + 1 * prev.stepData.scale;
      }
      if (stepData.dDuration) {
        stepData.duration = 1 * stepData.dDuration + 1 * prev.stepData.duration;
      }
    }
    step.stepData = stepData;
    if (!step.id) {
      step.id = "step-" + idx;
    }
    css(step, {
      position: "absolute",
      transform: "translate(-50%,-50%)" + translate(stepData.translate) + rotate(stepData.rotate) + scale(stepData.scale),
      transformStyle: "preserve-3d"
    });
    prev = step;
  }

  /*
  make a given step active
  */


  active = null;

  hashTimeout = null;

  select = function(el) {
    var activeIndex, duration, target, zoomDuration, zooming, _j, _k, _l, _len1, _len2, _len3, _results;
    if (!(el && el.stepData && el !== active)) {
      return false;
    }
    window.scrollTo(0, 0);
    step = el.stepData;
    if (active != null) {
      active.classList.remove("active");
    }
    el.classList.add("active");
    caffeine.className = "step-" + el.id;
    window.clearTimeout(hashTimeout);
    hashTimeout = window.setTimeout(function() {
      return window.location.hash = "#!/" + el.id;
    }, 1000);
    target = {
      rotate: {
        x: -parseInt(step.rotate.x, 10),
        y: -parseInt(step.rotate.y, 10),
        z: -parseInt(step.rotate.z, 10)
      },
      translate: {
        x: -step.translate.x,
        y: -step.translate.y,
        z: -step.translate.z
      },
      scale: 1 / parseFloat(step.scale)
    };
    zooming = target.scale >= current.scale;
    duration = active ? step.duration + "s" : "0";
    zoomDuration = active ? 0.5 * step.duration + "s" : "0";
    css(caffeine, {
      perspective: step.scale * 1000 + "px",
      transform: scale(target.scale),
      transitionDuration: duration,
      transitionDelay: zooming ? zoomDuration : "0ms"
    });
    css(canvas, {
      transform: rotate(target.rotate, true) + translate(target.translate),
      transitionDuration: duration,
      transitionDelay: zooming ? "0ms" : zoomDuration
    });
    current = target;
    active = el;
    activeIndex = steps.indexOf(active);
    for (_j = 0, _len1 = steps.length; _j < _len1; _j++) {
      step = steps[_j];
      step.classList.remove('past');
      step.classList.remove('future');
    }
    for (_k = 0, _len2 = steps.length; _k < _len2; _k++) {
      step = steps[_k];
      if (steps.indexOf(step) < activeIndex) {
        step.classList.add('past');
      }
    }
    _results = [];
    for (_l = 0, _len3 = steps.length; _l < _len3; _l++) {
      step = steps[_l];
      if (steps.indexOf(step) > activeIndex) {
        _results.push(step.classList.add('future'));
      }
    }
    return _results;
  };

  selectPrev = function() {
    prev = steps.indexOf(active) - 1;
    prev = prev >= 0 ? steps[prev] : steps[steps.length - 1];
    return select(prev);
  };

  selectNext = function() {
    var next;
    next = steps.indexOf(active) + 1;
    next = next < steps.length ? steps[next] : steps[0];
    return select(next);
  };

  /*
  Event Listener
  */


  document.addEventListener("keydown", function(event) {
    var _ref, _ref1;
    if (event.target.tagName === "PRE") {
      return;
    }
    if ((_ref = event.keyCode) === 33 || _ref === 37 || _ref === 38) {
      selectPrev();
      event.preventDefault();
    }
    if ((_ref1 = event.keyCode) === 9 || _ref1 === 32 || _ref1 === 34 || _ref1 === 39 || _ref1 === 40) {
      selectNext();
      return event.preventDefault();
    }
  }, false);

  document.addEventListener("click", function(event) {
    var href, target;
    target = event.target;
    while ((target.tagName !== "A" || target.tagName !== "IFRAME") && !target.stepData && target !== document.body) {
      target = target.parentNode;
    }
    if (target.tagName === "A") {
      href = target.getAttribute("href");
      if (href && href[0] === '#') {
        target = byId(href.slice(1));
      }
    }
    if (select(target)) {
      return event.preventDefault();
    }
  }, false);

  window.addEventListener("hashchange", function() {
    return select(getElementFromUrl());
  }, false);

  window.addEventListener("touchstart", function(event) {
    var touchLocation;
    touchLocation = event.touches[0].pageX / document.body.clientWidth;
    if (touchLocation < 0.5) {
      return selectPrev();
    } else {
      return selectNext();
    }
  });

  select(getElementFromUrl() || steps[0]);

  /*
  Expose the Caffeine High API
  */


  this.CaffeineHigh = {
    next: selectNext,
    prev: selectPrev
  };

}).call(this);
